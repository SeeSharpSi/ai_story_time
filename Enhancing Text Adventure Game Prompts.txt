From Storybook to Game System: A Framework for Enhancing Player Agency in LLM-Powered Interactive Fiction




Introduction


The central challenge presented is the transformation of a text-based adventure from a "guided storybook" into a "winnable game." This distinction is not merely semantic; it represents a fundamental paradigm shift in design philosophy. The current prompt architecture instructs the Large Language Model (LLM) to function as a collaborative author, prioritizing the generation of sequential narrative content. To achieve the desired "winnable game" experience, the LLM's role must be redefined from that of a storyteller to that of a Game Master and rules arbiter. It must transition from a system that primarily asks what to write next to one that first determines how the game's state changes based on established rules and player actions.
A "guided storybook" implies a linear or narrowly branching path where player choices serve primarily to advance a pre-determined plot.1 The player is a passenger, albeit one who can choose which window to look out of. In contrast, a "winnable game" is a systemic experience defined by a set of rules, pressures, and player-driven solutions.3 It is a space where players can develop mastery, overcome challenges through cleverness, and feel a genuine sense of ownership over the outcome because their actions have meaningful and foreseeable consequences.5
This report presents a comprehensive framework for re-architecting the provided prompts to facilitate this transformation. The analysis begins by establishing a theoretical foundation grounded in the principles of player agency and core gameplay loops, which are the architectural pillars of any successful interactive game. It then deconstructs the existing prompt package, using these principles as a critical lens to identify the specific weaknesses that produce the "storybook" feel. Following this diagnosis, the report proposes a new, systems-oriented framework built around a structured game_state object, effectively shifting the AI's primary function from narration to simulation. This new framework is then made concrete through a practical implementation, including fully rewritten and annotated prompts. Finally, the report explores advanced techniques for leveraging this robust new foundation to foster emergent gameplay and deeper player engagement.


Section 1: The Architecture of Agency: Core Principles for Interactive Game Design


To build a "winnable game," the underlying prompts must be engineered to support the core principles that generate engaging, player-driven experiences. A story becomes a game when the user's participation moves from passive reception to active influence. This section defines the key theoretical concepts—player agency, the core gameplay loop, and hybrid narrative structures—that must be encoded into the AI's instructions to facilitate this shift.


1.1 Defining Player Agency: Beyond Mere Choice


Player agency is the cornerstone of interactive design. It is frequently misconstrued as simply providing the player with choices. True agency, however, is a more profound and complex construct. It is the "capacity of players to influence the game world through their decisions and actions," granting them the freedom to "chart their own path" through the experience.5 For a player's actions to feel meaningful, the game system must be built upon a foundation that supports and validates their influence. Synthesizing established game design theory, four pillars are essential for architecting true agency into the game's core logic.
First, the game must present Challenging Situations. These are not merely narrative events but problems, obstacles, or tensions that require active resolution from the player.7 A storybook might state, "The door is locked." A game presents the locked door as a challenge to be overcome, creating a need for player action and driving engagement. Without resistance or a problem to solve, there is no game, only a sequence of events.3
Second, the system must provide Sufficient Communication, also known as foreseeability. Players must be given enough information to make informed, not blind, decisions. This involves understanding the current situation, the range of available actions, and the potential consequences of those actions.7 A player who pulls a lever without any clue as to its function is not exercising agency; they are gambling. A player who sees that the lever is connected to a portcullis and hears a guard approaching on the other side can make a strategic, meaningful choice. Clear feedback and understandable mechanics are paramount to prevent player frustration and ensure that failure feels like a learning opportunity, not a punishment from an arbitrary system.4
Third, the game must offer Meaningful Decisions. A choice is meaningful only if it has a tangible impact on the game state and is connected to the player's goals.5 A decision between a red sword and a blue sword that are functionally identical is a cosmetic, or "superficial," choice that does not confer agency.11 In contrast, a choice between a heavy axe that can break down doors but is slow in combat and a fast dagger that allows for stealthy approaches is a meaningful strategic decision. The prompt system must be designed to generate choices that present real trade-offs and have differentiated outcomes.
Finally, these meaningful decisions must lead to Significant Consequences. The game world must visibly and mechanically react to the player's actions.7 These consequences can manifest in three primary domains: narrative (a character's disposition changes, the plot branches), gameplay (a resource is consumed, a new ability is gained), and environmental (a bridge is destroyed, a secret passage is revealed).9 When players see their choices reflected in the world, it reinforces their sense of ownership and investment, proving that their actions matter.8 A prompt system that fails to facilitate this feedback loop, where actions have no lasting impact, will invariably produce a static, storybook-like world.


1.2 The Core Gameplay Loop: The Engine of a "Winnable Game"


A "winnable game" is not defined by a single victory condition but by the series of satisfying micro-victories that constitute the play experience. These are generated by the core gameplay loop, the essential "atom of gameplay" that forms the engine of interaction.3 A well-designed loop creates a compelling cycle of challenge, learning, and mastery that keeps players engaged.6
This fundamental loop can be broken down into a clear, four-stage process: Goal -> Challenge -> Solution -> Consequence/Feedback.3
1. Goal: The player has an objective, whether it is a grand quest (rescue the prince) or an immediate need (cross a chasm).
2. Challenge: An obstacle stands in the way of the goal (the prince is guarded by a dragon; the chasm is too wide to jump). This is the external factor that threatens the goal and necessitates player action.3
3. Solution: The player uses the tools and actions available to them to overcome the challenge (fight the dragon with a magic sword; use a rope to swing across the chasm). This is where player skill and cleverness are expressed.
4. Consequence/Feedback: The outcome of the player's attempted solution is reflected in the game state (the dragon is defeated; the player successfully crosses the chasm and a resource is used). This feedback validates the player's action and sets up the next goal.9
The current prompts provided by the user do not explicitly instruct the AI to construct or maintain this loop. They ask for the "next part of the story," which encourages the AI to simply describe the next event in a linear sequence. This breaks the cycle at the "Challenge" phase, preventing the player from formulating and executing their own solutions. To feel "winnable," the game must consistently present the player with solvable challenges, empowering them to complete the loop through their own ingenuity.


1.3 Narrative Structure and Its Impact on Agency


The structure of the game's narrative has a profound impact on the potential for player agency. The user's desire for a "story" that is also a "winnable game" highlights a classic tension in interactive narrative design between authorial control and player freedom.
A purely linear narrative follows a fixed, chronological path from A to B to C, much like a traditional novel or film.1 While this allows for tight, controlled storytelling, it inherently constrains agency. The player's actions may affect immediate gameplay, but they cannot alter the story's ultimate trajectory.2 This is the quintessential "storybook" model and is the primary source of the user's dissatisfaction.
A branching narrative offers more agency by allowing player choices to lead down different paths. However, to manage the exponential growth in content, these branches often reconverge at key plot points.15 While an improvement, this can sometimes create the illusion of choice, where different paths ultimately lead to the same outcome, undermining the significance of the player's decisions.16
The most effective solution for this use case is a hybrid narrative structure, often referred to as a "String of Pearls" or "Gated" model.2 In this model, the overall story follows a sequence of key, unchangeable plot points (the "string"). However, the gameplay
between these points is non-linear and systemic (the "pearls"). For example, the overall plot might require the player to retrieve a stolen artifact (Plot Point A) and deliver it to a distant city (Plot Point B). The "string" ensures this narrative progression. But how the player travels from A to B—navigating the wilderness, dealing with bandits, managing resources, solving environmental puzzles—is an open, systemic "pearl" of gameplay where their agency is maximized.
This hybrid model provides the ideal balance. It allows for a coherent, authored story with clear goals and progression, while simultaneously creating sandboxes of systemic play where the core gameplay loop can thrive. The prompts for the LLM can be architected to manage this structure, tracking progress along the main plot "string" while giving the AI autonomy to generate the dynamic, solvable challenges within each "pearl." This resolves the central conflict between "story" and "game" inherent in the user's request.


Section 2: Deconstruction of the Existing Prompt Architecture


Applying the theoretical principles of agency, gameplay loops, and narrative structure as a critical lens, an analysis of the existing prompt package reveals specific architectural weaknesses. These flaws systematically inhibit the creation of a "winnable game" and instead steer the LLM towards producing a "guided storybook." The deconstruction identifies how the current prompts fail to provide the AI with the necessary tools and instructions to function as a game master.


2.1 Analysis of the BasePrompt


The BasePrompt forms the foundation of the game's logic, and while it succeeds in establishing some basic technical parameters, it fails to encode the core principles of game design.
Strengths:
The prompt correctly establishes the AI's high-level role as a text-based adventure game and, crucially, mandates a strict JSON output format. This use of a structured data format is a significant strength and a best practice for reliable interaction with an LLM, as it provides a predictable interface for the game's client-side code.
Critical Weaknesses:
1. Focus on "Story" over "System": The prompt's primary commands are to "generate the next part of an interactive story" and "advance the story." This language primes the LLM to act as a writer, focusing its output on narrative progression rather than systemic arbitration. It lacks any instruction to create challenges, enforce rules, or manage a dynamic game world. The directive that "each move the user makes pushes them towards or away from a goal" is a laudable sentiment, but it is an outcome without a process. The prompt provides no mechanical framework for the AI to judge whether an action is helpful or harmful, leading to arbitrary and inconsistent rulings that undermine player trust and agency.
2. The Superficial Inventory System: The rules governing the items and items_removed arrays are purely declarative. An item, such as a "rusty key", is merely a string in a list. It possesses no inherent properties (e.g., 'metal', 'fits_lock_A'), no state (e.g., 'whole', 'broken'), and no defined relationship with other game objects.18 This design reduces items to simple collectibles rather than functional tools. This directly prevents the emergence of object-based puzzles, a cornerstone of the adventure game genre where players are expected to use items in clever ways to solve problems.19 Without a system where items have mechanical purpose, the player cannot form logical plans for their use, breaking a key part of the gameplay loop.
3. Absence of State Management: The most significant architectural flaw is the lack of a persistent, structured game state. The AI's only "memory" from one turn to the next is the STORY SO FAR text block and the simple inventory list. There is no mechanism for tracking the state of the environment (a door is now unlocked), the disposition of NPCs (a guard is now suspicious), or the status of the player (injured, tired). Without a persistent state model, the world cannot react meaningfully to player actions over time. Each turn effectively resets the world's internal logic, preventing the accumulation of significant consequences and making the game feel static and unresponsive.9 This lack of state is the primary technical reason the experience feels like a storybook, as the world has no memory beyond the words on the page.


2.2 Analysis of the Genre and Survive Modifiers


The supplementary prompts, while intended to add variety and challenge, are built upon the flawed foundation of the BasePrompt and thus fail to address the core mechanical issues.
* Genre Prompts (FantasyPrompt, SciFiPrompt, HistoricalFictionPrompt): These prompts are effective at applying a thematic "skin" to the narrative. They successfully guide the AI's stylistic choices and content generation (swords vs. lasers). However, they do nothing to alter the underlying mechanics. The game remains a linear storybook, merely changing its genre from fantasy to science fiction.
* SurvivePrompt: This modifier attempts to introduce challenge, but its directive—"The AI should prefer outcomes where the user gets hurt or dies"—is a crude and counterproductive implementation of difficulty. It encourages an adversarial, "killer GM" mentality that prioritizes punishment over fair, balanced challenge.4 Good game design creates challenges that are difficult but winnable, rewarding persistence and mastery.4 A system that simply punishes the player for "poor survival choices" without providing clear rules, feedback, and opportunities to learn from failure will lead to frustration, not engagement. It lacks a mechanism for a graduated difficulty curve or for making failure a meaningful learning experience.
The following table provides a systematic comparison of essential game design principles against the features of the current prompt architecture, starkly illustrating the existing gaps.
Table 2.1: Prompt Feature vs. Game Design Principle Analysis


Game Design Principle
	Corresponding Prompt Feature
	Analysis of Shortcoming
	Player Agency
	User's text input
	The system lacks a mechanism to ensure choices are meaningful and not merely cosmetic. It does not guide the AI to generate options with varied, foreseeable, and significant consequences.7
	Core Gameplay Loop
	"each move...pushes them towards or away from a goal"
	This is a desired outcome, not a mechanic. The prompt fails to instruct the AI to explicitly create Challenges or Obstacles for the player to solve, breaking the loop.3
	Meaningful Items
	items and items_removed arrays
	Items are simple strings with no properties, states, or defined uses. This prevents object-based puzzle design and reduces inventory to a checklist of collectibles.19
	Persistent State
	STORY SO FAR text block
	Relies on the LLM's unreliable context window. There is no structured, persistent state for the environment, NPCs, or puzzles, preventing lasting consequences and world reactivity.9
	Fair Challenge
	SurvivePrompt
	Encourages punitive, arbitrary outcomes rather than balanced, rule-based challenges. It lacks mechanisms for clear goals, a balanced difficulty curve, or learning from failure.4
	NPC Interaction
	<strong> tag for characters
	NPCs are just bolded words in a narrative. There is no system for tracking their disposition, knowledge, or goals, making deep or evolving social interaction impossible.22
	This deconstruction demonstrates that the current prompts are fundamentally misaligned with the goal of creating a "winnable game." They are architected to produce a narrative, not to simulate a world. To achieve the user's objective, a new framework is required—one that places a systemic, state-based simulation at its core.


Section 3: A Systems-Oriented Framework for Game-Centric Prompting


To transition from a storybook to a game, the prompt architecture must be rebuilt around a systemic core. This involves a fundamental shift in the AI's role: from a narrator of events to a simulator of a world. The new framework achieves this by making a structured, persistent game_state the central element of the interaction. The AI's primary task becomes calculating changes to this state, with the narrative description serving as a report of those changes.


3.1 The Core Shift: From story to game_state


The most critical change is to reframe the entire interaction. Currently, the AI generates a story string and a few simple arrays. In the new framework, the AI's main output will be a comprehensive game_state object. The narrative text, now a smaller component within the overall response, becomes a human-readable summary of the most recent state transition.
This approach forces the AI to reason systemically first and narrate second. Before it can describe what happens, it must first update the world's variables according to a set of rules. This grounds the narrative in a consistent, logical foundation, making the game world feel more coherent and fair. It moves the AI's function from that of a creative writer to that of a game engine processor.


3.2 Introducing a Structured game_state Object


The new architecture is built upon a detailed game_state JSON object that the AI receives and returns on every turn. This object serves as the game's complete memory, externalizing the logic from the LLM's unreliable context window into a deterministic structure. This state object should contain several key sub-objects, each designed to address a specific weakness of the old system.
* player_status: This object tracks the player's condition.
   * Fields: health (numeric), stamina (numeric), conditions (an array of strings, e.g., ["poisoned", "wet", "encumbered"]).
   * Purpose: This provides a concrete mechanical basis for survival gameplay, replacing the vague SurvivePrompt. Actions can now have direct, measurable costs, and challenges like poison or fatigue become solvable problems rather than arbitrary narrative punishments.3
* inventory: This is an array of objects, not strings. Each object represents a single item.
   * Fields: name (string), description (string), properties (array of strings, e.g., ["flammable", "heavy", "sharp", "conductive"]), and state (string, e.g., 'lit', 'broken', 'charged').
   * Purpose: This transforms items from simple collectibles into versatile tools with clear mechanical affordances. A "torch" is no longer just a word; it's an object with the 'flammable' property that can be put into a 'lit' state. This enables complex, object-based puzzle design.19
* environment: This object describes the current location and its interactive elements.
   * Fields: location_name (string), description (string), exits (object mapping directions to location names), world_objects (an array of interactable objects, each with its own name, properties, and state, e.g., a lever with state 'up').
   * Purpose: This allows for persistent environmental changes. When a player pulls the lever, its state changes to 'down' in the game_state. The world now remembers this action, enabling puzzles and consequences that unfold over time and space.9
* npcs: An array of non-player character objects present in the scene.
   * Fields: name (string), disposition (string, e.g., 'friendly', 'neutral', 'suspicious', 'hostile'), knowledge (array of flags, e.g., ["knows_player_is_thief"]), goal (string describing their immediate objective).
   * Purpose: This creates the foundation for dynamic NPC interactions. Instead of being static information dispensers, NPCs become agents with their own state that can be influenced by player actions, leading to social puzzles and evolving relationships.22
* active_puzzles_and_obstacles: An explicit list of the current challenges facing the player.
   * Fields: name (string), description (string), status (string, e.g., 'unsolved'), solution_hints (array of keywords or concepts, e.g., ["requires_force", "solution_is_key", "needs_light"]).
   * Purpose: This makes challenge generation a core, explicit task for the AI. It forces the AI to define the problems it presents, making the game feel more transparent and fair. It also provides a clear framework for designing and tracking puzzles.18


3.3 The New Prompt Logic: The AI as a State Machine


The interaction flow with the LLM is fundamentally altered. Instead of sending the entire story history, the game client will now manage the state.
1. The client holds the current, complete game_state JSON object.
2. The client sends a prompt containing two key pieces of information: the current game_state and the user_action string.
3. The AI's core instruction is to act as a state transition function: "Given the following game_state and the user_action, calculate the new game_state that results from the action. Then, based on the changes between the old and new state, generate a story_update object describing the transition."
4. The AI returns a single JSON object containing both the new_game_state and the story_update.
5. The client updates its definitive game_state with the new_game_state received from the AI and displays the contents of the story_update to the player.
This architecture offers a robust solution to the inherent limitations of LLMs, such as their unreliability and tendency to hallucinate.27 By externalizing the game's memory into a structured
game_state object managed by the client, the system's integrity no longer depends on the LLM's ability to "remember" details from a long block of text. The deterministic game state lives in the developer's code, which is reliable. The LLM is used for its greatest strengths: creative interpretation of rules, complex pattern matching to determine outcomes, and natural language generation to describe those outcomes. This hybrid approach, combining a deterministic state machine managed by the client with a powerful probabilistic processor (the LLM), creates a system that is both mechanically sound and creatively dynamic.


Section 4: Practical Implementation: Rewriting the Prompts for Winnable Gameplay


This section provides the concrete implementation of the systems-oriented framework. It includes a complete rewrite of the BasePrompt and a re-imagining of the modifiers. These new prompts are designed to instruct the AI to function as a game engine, prioritizing systemic logic, fair challenges, and meaningful consequences. Detailed annotations explain the purpose of each new instruction, linking it back to the core game design principles established earlier.


4.1 The New BasePrompt


The original BasePrompt is replaced with a more detailed and explicit set of instructions that redefine the AI's role and responsibilities.






You are a Game Master AI (GMAI). Your primary function is to act as a game engine and world simulator for a text-based adventure. You will receive a JSON object containing the current `game_state` and a string representing the `user_action`. Your task is to:
1.  Analyze the `user_action` in the context of the current `game_state`.
2.  Calculate the resulting `new_game_state` by applying the rules below.
3.  Generate a `story_update` object that describes the transition from the old state to the new state.

**You MUST respond with a single, valid JSON object and nothing else.**

The response JSON must have two top-level keys:
1.  `new_game_state`: The complete, updated game state object after the user's action. This object MUST conform to the structure of the input `game_state`.
2.  `story_update`: An object containing the narrative description for the player. It must have the following five keys:
   a. "story": A string describing the outcome of the user's action (maximum 83 words). **You MUST bold important story points, characters, or objects using <strong></strong> HTML tags.**
   b. "items_added": An array of strings for the `name` of items newly added to the player's inventory in this turn.
   c. "items_removed": An array of strings for the `name` of items removed from the player's inventory in this turn.
   d. "game_over": A boolean. Set to true ONLY if the `player_status.health` drops to 0 or a critical story objective results in a definitive end.
   e. "background_color": A single, muted or pastel hex color code that reflects the mood of the story update.

---
CORE GMAI RULES:

**1. Rule of Causality and Consequence:**
  - Every change in the `new_game_state` MUST be a direct and logical consequence of the `user_action` interacting with the previous `game_state`.[9, 28]
  - Player actions must have tangible effects. If the player uses a key on a lock, update the `world_objects` state. If the player eats food, update their `player_status`. If they anger an NPC, update the NPC's `disposition`.[9]
  - When an item is added to or removed from inventory, you MUST wrap the item's name in the story text with the appropriate HTML span tag: <span class="item-added">Item Name</span> or <span class="item-removed">Item Name</span>.

**2. Rule of Challenge and Obstacle:**
  - The game must be challenging. If the player's path is not blocked by an existing obstacle from the `active_puzzles_and_obstacles` list, you MUST generate a new, logical obstacle.
  - An obstacle is a problem preventing the player from achieving an immediate goal (e.g., a locked door, a wide chasm, a hostile creature, a cryptic terminal).[3, 19]
  - When you create a new obstacle, add a corresponding object to the `active_puzzles_and_obstacles` array in the `new_game_state`. This object must define the nature of the puzzle and provide hints for its solution.

**3. Rule of Affordance and Solution:**
  - The world must be interactive and solvable. The solutions to obstacles MUST be discoverable through clever interaction with `world_objects` or items in the `inventory`.[18, 29]
  - Do not create unsolvable problems. The means to overcome a challenge must exist within the game world. For example, if you introduce a locked door, ensure a key, a lockpick, or a means of forcing it open is discoverable.
  - Analyze the `properties` of items in the `inventory` and `world_objects` to determine valid interactions. A 'flammable' object can be burned; a 'heavy' object can be used to press a switch.

**4. Rule of Narrative and Style:**
  - The `story` text should be a concise summary of the state change, not a lengthy narrative. Focus on the action's outcome.
  - If the `STORY SO FAR` section below is empty, you MUST begin a brand new story. The story must start with the user waking up in a new and interesting location, and you must generate the initial `game_state` from scratch.
  - The story MUST be written in the style of %s.

**5. Rule of State Integrity:**
  - The `new_game_state` you return must be a complete and valid JSON object, preserving the structure of the input state. Do not omit any keys. Only modify the values of keys that have been logically affected by the `user_action`.
---
STORY SO FAR:



4.2 Rewritten Genre and Difficulty Modifiers


The original modifiers are replaced with a more integrated and mechanically relevant system. The crude SurvivePrompt is deprecated in favor of a ConsequenceModel parameter that lives inside the game_state itself, allowing for dynamic difficulty.
* Genre Prompts: These prompts are now appended to the BasePrompt and add genre-specific rules for challenge generation.
   * FantasyPrompt: The story MUST be in a classic fantasy setting. Obstacles should involve magic, mythical creatures, ancient runes, alchemy, or medieval mechanics like traps and locks. Item properties could include 'magical', 'blessed', 'cursed'.
   * SciFiPrompt: The story MUST be in a science fiction setting. Obstacles should involve malfunctioning technology, alien lifeforms, computer hacking, navigating zero-gravity, or advanced security systems. Item properties could include 'conductive', 'emp_shielded', 'energy_source'.
   * HistoricalFictionPrompt: The story MUST be a historical scenario set before 1950. Obstacles should be grounded in the realities of the era, involving social customs, period-appropriate technology, espionage, or navigating real historical events. The scenario MUST be a real historical event that had a good ending.
* Difficulty/Consequence Model: The SurvivePrompt is removed. Instead, the game_state will contain a key: game_state.rules.consequence_model. The BasePrompt is updated with a section explaining how to interpret this key.
Add to BasePrompt under CORE GMAI RULES:
**6. Rule of Consequence Modeling:** You must adhere to the consequence_modelspecified ingame_state.rules`.
   * If "exploratory": Resources are plentiful. Negative consequences are minimal. Player actions should rarely result in injury or significant item loss. Focus on discovery and narrative.
   * If "challenging": Resources are scarce. Actions have clear risk/reward trade-offs. Failure results in setbacks (e.g., player_status.health reduction, item damage), but rarely immediate death. Clearly signpost dangerous actions.4
   * If "punishing": As per "challenging," but poor choices in high-risk situations can lead to severe consequences, including character death (game_over: true). Risks must be communicated clearly to the player before they act.`


4.3 Example Walkthrough: Before and After


This walkthrough demonstrates the practical difference between the old and new prompt systems in a simple scenario.
Scenario: The player enters a dark room containing a locked chest.
Interaction with OLD Prompt System:
   1. AI Output: { "story": "You enter a dusty storeroom. It's too dark to see clearly, but you can make out the shape of a <strong>large wooden chest</strong> in the center of the room.", "items":, "items_removed":, "game_over": false, "background_color": "#3d3d3d" }
   2. User Input: open chest
   3. AI Output: { "story": "You try the lid of the chest, but it's locked tight. You'll need a key to open it.", "items":, "items_removed":, "game_over": false, "background_color": "#3d3d3d" }
   * Analysis: This is a conversational dead end. The player has no clear path forward. The interaction feels like a "storybook" telling the player what they can't do, rather than a "game" presenting a problem to be solved.
Interaction with NEW Prompt System:
   1. Initial AI Output (after player enters room):
   * story_update: { "story": "You step into a dank, musty storeroom. The air is thick with the smell of old wood and rust. In the faint light from the doorway, you see a <strong>large, iron-banded chest</strong>. A <strong>rusty crowbar</strong> leans against the far wall.",... }
   * new_game_state:
JSON
{
 "environment": {
   "location_name": "Storeroom",
   "world_objects": [
     { "name": "iron-banded chest", "properties": ["heavy", "wooden"], "state": "locked" },
     { "name": "rusty crowbar", "properties": ["heavy", "metal", "tool"], "state": "default" }
   ]
 },
 "active_puzzles_and_obstacles":
   }
 ],
... // other state fields
}

      2. User Input: use crowbar on chest
      3. AI computes the state change: It sees the user_action matches a solution_hint for the active puzzle. It determines using the crowbar (tool) on the locked chest will force it open. It updates the state accordingly.
      4. Final AI Output:
      * story_update: { "story": "You wedge the <span class=\"item-added\">rusty crowbar</span> into the seam of the chest. With a loud groan of protesting metal and splintering wood, the lock gives way. Inside, you find a <strong>coiled rope</strong> and a <strong>leather-bound journal</strong>.", "items_added": ["rusty crowbar", "coiled rope", "leather-bound journal"],... }
      * new_game_state:
JSON
{
 "inventory": [
   { "name": "rusty crowbar",... },
   { "name": "coiled rope", "properties": ["long", "strong"],... },
   { "name": "leather-bound journal", "properties": ["readable", "lore"],... }
 ],
 "environment": {
   "world_objects": [
     { "name": "iron-banded chest", "properties": ["heavy", "wooden"], "state": "open_broken" }
   ]
 },
 "active_puzzles_and_obstacles":, // Puzzle is solved and removed
... // other state fields updated
}

      * Analysis: This interaction demonstrates a complete gameplay loop. The AI presented a Challenge (locked chest) and the means for a Solution (crowbar). The player used their agency to connect the two. The Consequence was a changed world state (chest is open, new items acquired), which was clearly communicated. This feels like a "winnable game" because the player solved a puzzle using the rules and objects provided by the world.


Section 5: Advanced Techniques for Emergent Narrative and Gameplay


With a robust, state-based framework in place, it becomes possible to implement more advanced mechanics that foster emergent gameplay—situations and narratives that arise organically from the interaction of systems, rather than being explicitly pre-scripted. These techniques push the experience further from a static story and closer to a dynamic simulation.


5.1 Dynamic Puzzle and Quest Generation


The structured game_state allows the AI to move beyond presenting static, pre-defined puzzles and begin generating them dynamically based on the current context. This enhances replayability and creates a world that feels responsive and alive.
The prompt can be augmented with conditional instructions to guide this process. For example, a rule could be added: "If the player enters a location of high importance (e.g., a 'throne_room' or 'engine_core') and there are no active_puzzles_and_obstacles, create a new multi-step obstacle. This obstacle must require the use of at least one item from the player's inventory and one world_object from a previously visited location, encouraging exploration and memory.".30
This instruction leverages the entire game_state. The AI can scan the player's inventory for an item like a "power cell" and review the environment history to recall a "dead terminal" in a previous room. It can then construct a new puzzle: "The throne room door is sealed by an electronic lock. The control panel is dead." The solution is emergent: the player must realize they need to take the power cell from their inventory back to the dead terminal to find the code to unlock the throne room door. This creates a more complex and satisfying challenge than a simple key-and-lock puzzle, rewarding players who pay attention to the world and think critically about their resources.7


5.2 Systemic NPC Behavior


The npcs object in the game_state provides the foundation for characters who are more than just interactive dialogue boxes. By giving NPCs internal states such as disposition, knowledge, and goals, their behavior can become systemic and responsive.22
The prompt can be enhanced to manage these social dynamics: "After every user_action, evaluate its impact on any present NPCs. Update the NPC's disposition based on the action's alignment with their goal. If the player's action is helpful, shift disposition towards 'friendly'. If it is obstructive or threatening, shift it towards 'hostile'. An NPC's disposition MUST affect their behavior and the story description.".23
For example, if an NPC has the goal: "Protect the sacred idol" and the player attempts to take idol, the AI would shift the NPC's disposition to 'hostile'. This state change would then trigger new behaviors. A hostile NPC might attack the player, becoming a combat obstacle. A suspicious NPC might refuse to share information. A friendly NPC might offer help or a new item. This turns social interactions into a form of puzzle, where the player must understand an NPC's motivations to achieve a desired outcome, adding significant depth to the game world.24


5.3 Rewarding Exploration and Fostering Discovery


To prevent the game from feeling like a linear sequence of puzzles, it is crucial to make exploration an intrinsically rewarding activity. The world should feel rich, deep, and filled with secrets that are not essential to the main plot but enhance the player's understanding and immersion.35
The AI can be prompted to create this richness: "When generating the description for a new environment, include at least one detail or world_object that is purely for environmental storytelling. This detail should not be a puzzle but should hint at the history, lore, or culture of the game world. If the player chooses to examine this detail, reward them with unique flavor text that deepens their understanding of the world."
For instance, in a ruined castle, the AI might add a description of "a faded tapestry depicting a two-headed wolf." This isn't a puzzle, but if the player examines it, the AI can provide a snippet of lore about the noble house that once ruled there. This encourages players to slow down, look around, and engage with the world on a deeper level.30 It transforms the environment from a mere container for puzzles into a narrative artifact in its own right, making discovery a reward in itself and significantly improving the player's sense of immersion and connection to the game.36


Conclusion


The analysis and proposed framework address the core objective of transforming a "guided storybook" into a "winnable game." The fundamental solution lies in a paradigm shift: re-architecting the LLM prompts to prioritize the simulation of a systemic, state-based world over the generation of linear narrative. The current prompt structure, with its focus on "story" and its lack of mechanical depth, is the root cause of the passive, non-interactive experience.
The recommended course of action is to deprecate the existing prompts and implement the proposed systems-oriented framework. This involves two primary changes:
         1. Adopt a State-Centric Architecture: The interaction with the LLM must be rebuilt around a comprehensive game_state JSON object. This object, containing structured data on player status, inventory, environmental objects, and NPCs, becomes the definitive "memory" of the game. This externalizes the game's logic, making it more robust, predictable, and less susceptible to LLM hallucination.
         2. Redefine the AI's Role to Game Master: The new BasePrompt redefines the AI's function from a writer to a world simulator and rules arbiter. Its primary task is to calculate the new game_state based on player actions and a clear set of rules governing causality, challenge, and consequence. The narrative it generates becomes a report of these systemic changes, not the primary output itself.
This new framework directly fosters the experience of a "winnable game." It creates fair and transparent challenges by forcing the AI to explicitly define obstacles and their potential solutions. It makes player choices meaningful by ensuring they have tangible, lasting consequences on a persistent game state. It builds a sense of mastery by providing a consistent set of rules and mechanics that players can learn and leverage to overcome difficulties. Ultimately, this approach grants the player true agency—the power to influence a dynamic world through their own ingenuity, charting their own unique path to victory or defeat.
The power of Large Language Models in the context of gaming extends far beyond their capacity for prose. Their true potential lies in their ability to simulate complex, dynamic, and responsive worlds. By architecting prompts that treat the AI as a game engine rather than merely a storyteller, developers can unlock this potential, paving the way for a new generation of truly interactive and emergent experiences.
Works cited
         1. Linear & non-linear stories – Game Design & Development 2021, accessed August 13, 2025, https://ecampusontario.pressbooks.pub/gamedesigndevelopmenttextbook/chapter/linear-non-linear-stories/
         2. Interactive Storytelling - Narrative Techniques and Methods in Video Games: Linear and Non-Linear, accessed August 13, 2025, https://scalar.usc.edu/works/interactive-storytelling-narrative-techniques-and-methods-in-video-games/linear-and-non-linear
         3. Game Design Principles : r/gamedesign - Reddit, accessed August 13, 2025, https://www.reddit.com/r/gamedesign/comments/vc70h5/game_design_principles/
         4. How Game Design Principles Drive Player Engagement | CG Spectrum, accessed August 13, 2025, https://www.cgspectrum.com/blog/game-design-principles-player-engagement
         5. Player Agency - Meegle, accessed August 13, 2025, https://www.meegle.com/en_us/topics/game-design/player-agency
         6. The Anatomy of a Satisfying Win | Game Design Basics - YouTube, accessed August 13, 2025, https://www.youtube.com/watch?v=9PSY4f0m4m0
         7. Designing Player Agency: A Beginner's Guide - Game Design Skills, accessed August 13, 2025, https://gamedesignskills.com/game-design/player-agency/
         8. Mastering Player Agency in Game Design - Number Analytics, accessed August 13, 2025, https://www.numberanalytics.com/blog/mastering-player-agency-game-design
         9. Consequences in Game Design - Number Analytics, accessed August 13, 2025, https://www.numberanalytics.com/blog/consequences-in-game-design
         10. Meaningful Choices - University XP, accessed August 13, 2025, https://www.universityxp.com/blog/2019/8/6/meaningful-choices
         11. Player Agency: What Is It and Why Is It Important? - Bluebird International, accessed August 13, 2025, https://bluebirdinternational.com/player-agency/
         12. GameDev Thoughts: The Power Of Meaningful Choices In Game Design | by Daniel Doan, accessed August 13, 2025, https://medium.com/@doandaniel/gamedev-thoughts-the-power-of-meaningful-choices-in-game-design-50dbdeb0348a
         13. The 10 Basic Principles of Game Design Every Indie Dev Should Know - YouTube, accessed August 13, 2025, https://www.youtube.com/watch?v=5Fk7p-f2ymY
         14. What makes a game rewarding? : r/truegaming - Reddit, accessed August 13, 2025, https://www.reddit.com/r/truegaming/comments/44pzeh/what_makes_a_game_rewarding/
         15. Narrative Design 102: Interactive Story Techniques | by Johnnemann Nordhagen | Medium, accessed August 13, 2025, https://johnnemann.medium.com/narrative-design-102-interactive-story-techniques-7e998208afa9
         16. Linear story games versus choices - Reddit, accessed August 13, 2025, https://www.reddit.com/r/gaming/comments/sigw12/linear_story_games_versus_choices/
         17. Structures of choice in narratives in Gamification and games - æStranger - aeStranger, accessed August 13, 2025, https://aestranger.com/structures-choice-narratives-gamification-games/
         18. How to plan out parser puzzles - General Design Discussions, accessed August 13, 2025, https://intfiction.org/t/how-to-plan-out-parser-puzzles/65870
         19. Puzzles in Interactive Fiction - Jerz's Literacy Weblog, accessed August 13, 2025, https://jerz.setonhill.edu/if/Puzzles.htm
         20. Text Adventure Game Design in 2020 | by Chris Ainsley - Medium, accessed August 13, 2025, https://medium.com/@model_train/text-adventure-game-design-in-2020-608528ac8bda
         21. Top 9 Game Design Principles for New Developers - Blog - Meshy AI, accessed August 13, 2025, https://www.meshy.ai/blog/game-design-principles
         22. How to Write NPCs That Feel Alive and Add Depth to Your Story | by Nicholas Yeager, accessed August 13, 2025, https://medium.com/@nicholasyeager2020/how-to-write-npcs-that-feel-alive-and-add-depth-to-your-story-226342eb1ade
         23. Crafting NPC Interaction Plans: Designing Encounters With Your Players In Mind, accessed August 13, 2025, https://www.roleplayingtips.com/npcs-roleplaying/crafting-npc-interaction-plans-designing-encounters-with-your-players-in-mind/
         24. Puzzles - Emily Short's Interactive Storytelling, accessed August 13, 2025, https://emshort.blog/how-to-play/reading-if/puzzles/
         25. Crafting Dynamic NPCs with AI: Game Development Guide - Whimsy Games, accessed August 13, 2025, https://whimsygames.co/blog/crafting-dynamic-npcs-with-ai-game-development-guide/
         26. Best practices for puzzle design in Choice based IF, accessed August 13, 2025, https://intfiction.org/t/best-practices-for-puzzle-design-in-choice-based-if/65851
         27. How do you create engaging characters in your games? : r/gamedev - Reddit, accessed August 13, 2025, https://www.reddit.com/r/gamedev/comments/13bz1y3/how_do_you_create_engaging_characters_in_your/
         28. What are some good ways to encourage spontaneous, organic exploration in a game?, accessed August 13, 2025, https://www.quora.com/What-are-some-good-ways-to-encourage-spontaneous-organic-exploration-in-a-game
         29. Any ideas for how to encourage exploration/adventure : r/RPGdesign - Reddit, accessed August 13, 2025, https://www.reddit.com/r/RPGdesign/comments/16olqk3/any_ideas_for_how_to_encourage/
         30. How can a GM quickly create interesting, engaging NPCs? - RPG Stack Exchange, accessed August 13, 2025, https://rpg.stackexchange.com/questions/1946/how-can-a-gm-quickly-create-interesting-engaging-npcs
         31. Creating Autonomous Non-Player Characters in Interactive Fiction, accessed August 13, 2025, http://brasslantern.org/writers/iftheory/autonomousnpcs.html
         32. 8 Steps to Building Unforgettable NPCs Using AI Tools Like ChatGPT, DALL-E 3, and The Gamemaster Platform - The Enchanted Scribe, accessed August 13, 2025, https://www.the-enchanted-scribe.com/post/8-steps-to-building-unforgettable-npcs-using-ai-tools-like-chatgpt-dall-e-3-and-the-gamemaster-pla
         33. How to encourage exploration in a 2D open world? : r/gamedesign - Reddit, accessed August 13, 2025, https://www.reddit.com/r/gamedesign/comments/8ak9hy/how_to_encourage_exploration_in_a_2d_open_world/
         34. Creating Engaging Interactive Storylines in 3D Games - A Step-by-Step Guide - MoldStud, accessed August 13, 2025, https://moldstud.com/articles/p-creating-engaging-interactive-storylines-in-3d-games-a-step-by-step-guide
         35. How to Cultivate Literacy Skills With Interactive Fiction - Edutopia, accessed August 13, 2025, https://www.edutopia.org/article/cultivating-literacy-skills-interactive-fiction/